<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.blog.repository.BlogRepository">
    <!--리턴타입이 entity 등의 클래스로 구성된 경우 패키지명부터 적어준다. -->
    <select id="findAll" resultType="com.spring.blog.entity.Blog">
        SELECT
            blog_id as blogId,
            writer,
            blog_title as blogTitle,
            blog_content as blogContent,
            published_at as publishedAt,
            updated_at as updatedAt,
            blog_count as blogCount
        FROM
            Blog
        ORDER BY
            blog_id desc
    </select>

    <select id="findById" resultType="com.spring.blog.entity.Blog" parameterType="Long">
        SELECT
            blog_id as blogId,
            writer,
            blog_title as blogTitle,
            blog_content as blogContent,
            published_at as publishedAt,
            updated_at as updatedAt,
            blog_count as blogCount
        FROM
            Blog
        WHERE
            blog_id = #{blogId}
    </select>

    <update id="save" parameterType="com.spring.blog.entity.Blog">
        INSERT INTO
            blog (writer, blog_title, blog_content)
        VALUES
            (#{writer}, #{blogTitle}, #{blogContent})
    </update>

    <update id="deleteById" parameterType="long">
        DELETE FROM
            blog
        WHERE
            blog_id = #{blogId}
    </update>

<!--    <update id="update" parameterType="com.spring.blog.entity.Blog">-->
<!--        UPDATE-->
<!--            blog-->
<!--        SET-->
<!--            blog_title = #{blogMap.blogTitle},-->
<!--            blog_content = #{blogMap.blogContent},-->
<!--            updated_at = now()-->
<!--        WHERE-->
<!--            blog_id = #{blogId}-->
<!--    </update>-->

    <update id="update" parameterType="com.spring.blog.entity.Blog" >
        UPDATE
            blog
        SET
            blog_title = #{blogTitle},
            blog_content = #{blogContent},
            updated_at = now()
        WHERE
            blog_id = #{blogId}
    </update>

    <!--테스트를 위한 쿼리문들-->
    <update id="createBlogTable">
        CREATE TABLE IF NOT EXISTS Blog(
            blog_id int auto_increment primary key,
            writer varchar(16) not null,
            blog_title varchar(200) not null,
            blog_content varchar(4000),
            published_at datetime default now(),
            updated_at datetime default now(),
            blog_count int default 0
        );
    </update>

    <insert id="insertTestData">
        INSERT INTO blog VALUES
        (null, 'user no.1', 'title1', 'content1', now(), now(), null),
        (null, 'user no.2', 'title2', 'content2', now(), now(), null),
        (null, 'user no.3', 'title3', 'content3', now(), now(), null)
    </insert>

    <update id="dropBlogTable">
        DROP TABLE Blog
    </update>



</mapper>